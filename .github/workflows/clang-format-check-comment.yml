---
name: ClangFormat Check suggestions

# read-write repo token
# access to secrets
on:
  workflow_run:
    workflows: ["ClangFormat Check"]
    types:
      - completed

jobs:
  upload:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      # Debug
      - name: Dump GitHub context
        continue-on-error: true
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
      - name: Dump WORKFLOW_RUN context
        continue-on-error: true
        env:
          WORKFLOW_RUN_CONTEXT: ${{ toJson(github.event.workflow_run) }}
        run: |
          echo "$WORKFLOW_RUN_CONTEXT"
      - name: Dump GitHub context
        continue-on-error: true
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        continue-on-error: true
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        continue-on-error: true
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        continue-on-error: true
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        continue-on-error: true
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        continue-on-error: true
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: "Download artifact"
        uses: actions/github-script@v7.0.1
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - run: unzip pr.zip
      - name: "Comment on PR"
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = Number(fs.readFileSync('./NR'));
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: 'Everything is OK. Thank you for the PR!'
            });
      - uses: reviewdog/action-setup@v1
      - run: reviewdog -version
      - run: |
          if ! command -v reviewdog >/dev/null 2>&1; then
            echo "reviewdog was not installed"
            exit 1
          fi
          echo "::group::ðŸ“– reviewdog -h"
          reviewdog -h 2>&1 || true
          echo "::endgroup::"
      - run: reviewdog -list
      # - uses: re
      # listWorkflowRunArtifacts
